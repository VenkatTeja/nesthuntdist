{"version":3,"sources":["api/project/project.model.js"],"names":["Schema","ProjectSchema","name","String","info","status","Number","type","Types","ObjectId","ref","LegalBy","techBy","approvals","dtcp","Boolean","cmda","lpa","panchayath","imagesInt","imagesExt","location","lat","lng","brochure","offers","pic","text","mailId","builder","Project","model","ProjectTypeSchema","project","layoutNo","upt","percentUDS","categories","num","size","villaType","totalPrice","rps","base","devCharges","others","total","ProjectType"],"mappings":"AAAA;;;;;;AAEA;;;;;;AACA,IAAIA,SAAS,mBAASA,MAAtB;;AAEA,IAAIC,gBAAgB,IAAID,MAAJ,CAAW;AAC7BE,QAAMC,MADuB;AAE7BC,QAAMD,MAFuB;AAG7BE,UAAQC,MAHqB,EAGb;AAChBC,QAAM,EAACA,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,aAAjC,EAJuB,EAI0B;AACvDC,WAASR,MALoB,EAKZ;AACjBS,UAAQT,MANqB,EAMb;AAChBU,aAAU,EAACC,MAAMC,OAAP,EAAgBC,MAAMD,OAAtB,EAA+BE,KAAKF,OAApC,EAA6CG,YAAYH,OAAzD,EAPmB;AAQ7BI,aAAY,CAAChB,MAAD,CARiB;AAS7BiB,aAAW,CAACjB,MAAD,CATkB;AAU7BkB,YAAU,EAACC,KAAInB,MAAL,EAAYoB,KAAIpB,MAAhB,EAAwBD,MAAMC,MAA9B,EAVmB;AAW7BqB,YAAUrB,MAXmB;AAY7BsB,UAAQ,EAACC,KAAIvB,MAAL,EAAawB,MAAKxB,MAAlB,EAZqB;AAa7ByB,UAAQzB,MAbqB;AAc7B0B,WAAS,EAACtB,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,MAAjC;;AAdoB,CAAX,CAApB;;AAkBA,IAAIoB,UAAU,mBAASC,KAAT,CAAe,SAAf,EAA0B9B,aAA1B,CAAd;;AAEA,IAAI+B,oBAAoB,IAAI,mBAAShC,MAAb,CAAoB;AAC1CiC,WAAS,EAAC1B,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,SAAjC,EADiC;AAE1CH,QAAMD,MAFoC,EAE5B;;AAEd;AACA4B,YAAW5B,MAL+B;;AAO1C;AACA6B,OAAK,CAAC7B,MAAD,CARqC,EAQ3B;AACf8B,cAAY9B,MAT8B;;AAW1C;AACA;;AAEA+B,cAAY,CAAC,EAACC,KAAKhC,MAAN,EAAciC,MAAMjC,MAApB,EAA4BkC,WAAUlC,MAAtC,EAA8CmC,YAAWnC,MAAzD,EAAD,CAd8B;AAe1CoC,OAAK,EAACC,MAAKrC,MAAN,EAAcsC,YAAYtC,MAA1B,EAAkCuC,QAAQvC,MAA1C,EAAkDwC,OAAOxC,MAAzD,EAfqC,EAApB,CAAxB;;AAkBA,IAAIyC,cAAc,mBAAShB,KAAT,CAAe,aAAf,EAA8BC,iBAA9B,CAAlB;;kBAEe,EAACF,SAASA,OAAV,EAAmBiB,aAAaA,WAAhC,E","file":"project.model.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nvar Schema = mongoose.Schema;\n\nvar ProjectSchema = new Schema({\n  name: String,\n  info: String,\n  status: Number, // Status : 0 - completed, 1 - ongoing, 2-upcoming\n  type: {type:Schema.Types.ObjectId, ref:\"ProjectType\"}, // Land/Flat/Villa\n  LegalBy: String, // Is Legal Cleared?\n  techBy: String, // Is Technical Cleared?\n  approvals:{dtcp: Boolean, cmda: Boolean, lpa: Boolean, panchayath: Boolean},\n  imagesInt : [String],\n  imagesExt: [String],\n  location: {lat:String,lng:String, name: String},\n  brochure: String,\n  offers: {pic:String, text:String},\n  mailId: String,\n  builder: {type:Schema.Types.ObjectId, ref:\"User\"}\n\n});\n\nvar Project = mongoose.model('Project', ProjectSchema);\n\nvar ProjectTypeSchema = new mongoose.Schema({\n  project: {type:Schema.Types.ObjectId, ref:\"Project\"},\n  type: Number, // Land-1, Flat-2, Villa-3\n  \n  // Land\n  layoutNo : Number,\n\n  // Flat\n  upt: [Number], // Units per Tower\n  percentUDS: Number,\n\n  // Villa\n  // villaType: Number, // 1-L+B, 2-B+UDS\n\n  categories: [{num: Number, size: Number, villaType:Number, totalPrice:Number}],\n  rps: {base:Number, devCharges: Number, others: Number, total: Number}, // Rate per square feet\n});\n\nvar ProjectType = mongoose.model('ProjectType', ProjectTypeSchema);\n\nexport default {Project: Project, ProjectType: ProjectType};"]}