{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","UserSchema","name","String","lastname","username","type","lowercase","email","required","indexOf","provider","role","default","password","salt","owner","attorney","cin","website","projects","Types","ObjectId","ref","pan","aadhar","oAddress","nWorkExp","income","Number","currentEmi","loanEstimate","loanTenure","salarySlips","bankStatements","fcuReport","addressProof","form16","address","phone","facebook","twitter","google","github","virtual","get","_id","path","validate","length","value","respond","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nmongoose.Promise = require('bluebird');\nimport mongoose, {Schema} from 'mongoose';\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar UserSchema = new Schema({\n  name: String,\n  lastname: String,\n  username: {\n    type: String,\n    lowercase: true\n    // required() {\n    //   if(authTypes.indexOf(this.provider) === -1) {\n    //     return true;\n    //   } else {\n    //     return false;\n    //   }\n    // }\n  },\n  email: {\n    type: String,\n    lowercase: true,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  provider: String,\n  salt: String,\n\n  // Builder\n  owner: String,\n  attorney: String,\n  cin: String,\n  website: String,\n  projects: [{type:Schema.Types.ObjectId, ref:\"Project\"}],\n  // type: String, // Builder/Buyer\n\n  // Buyer\n  pan: String,\n  aadhar: String,\n  oAddress: String,\n  nWorkExp: String,\n  income: Number,\n  currentEmi: Number,\n  loanEstimate: Number,\n  loanTenure: Number,\n  \n  // Documents\n  salarySlips:[String],\n  bankStatements: [String],\n  fcuReport: String,\n  addressProof: String,\n  form16: String,\n\n\n  // Common\n  address: String,\n  phone: Number,\n\n  // Auth detials\n  facebook: {},\n  twitter: {},\n  google: {},\n  github: {}\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      name: this.name,\n      role: this.role\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      _id: this._id,\n      role: this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function(email) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return email.length;\n  }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return password.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value, respond) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return respond(true);\n    }\n\n    return this.constructor.findOne({ email: value }).exec()\n      .then(user => {\n        if(user) {\n          if(this.id === user.id) {\n            return respond(true);\n          }\n          return respond(false);\n        }\n        return respond(true);\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if(!this.isModified('password')) {\n      return next();\n    }\n\n    if(!validatePresenceOf(this.password)) {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return next(new Error('Invalid password'));\n      } else {\n        return next();\n      }\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if(saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if(encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        return next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if(!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if(err) {\n        return callback(err);\n      }\n\n      if(this.password === pwdGen) {\n        return callback(null, true);\n      } else {\n        return callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if(typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if(typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    } else {\n      throw new Error('Missing Callback');\n    }\n\n    if(!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if(!password || !this.salt) {\n      if(!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n\n    if(!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n        .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, key.toString('base64'));\n      }\n    });\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"]}