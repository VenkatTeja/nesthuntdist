{"version":3,"sources":["api/project/project.model.js"],"names":["Schema","ProjectSchema","name","String","info","status","Number","type","Types","ObjectId","ref","isLegalClr","Boolean","isTechClr","approvals","dtcp","cmda","lpa","panchayath","imagesInt","imagesExt","location","brochure","offers","pic","text","mailId","builder","Project","model","ProjectTypeSchema","project","layoutNo","upt","percentUDS","villaType","num","rps","base","devCharges","others","total","size","ProjectType"],"mappings":"AAAA;;;;;;AAEA;;;;;;AACA,IAAIA,SAAS,mBAASA,MAAtB;;AAEA,IAAIC,gBAAgB,IAAID,MAAJ,CAAW;AAC7BE,QAAMC,MADuB;AAE7BC,QAAMD,MAFuB;AAG7BE,UAAQC,MAHqB,EAGb;AAChBC,QAAM,EAACA,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,aAAjC,EAJuB,EAI0B;AACvDC,cAAYC,OALiB,EAKR;AACrBC,aAAWD,OANkB,EAMT;AACpBE,aAAU,EAACC,MAAMH,OAAP,EAAgBI,MAAMJ,OAAtB,EAA+BK,KAAKL,OAApC,EAA6CM,YAAYN,OAAzD,EAPmB;AAQ7BO,aAAY,CAAChB,MAAD,CARiB;AAS7BiB,aAAW,CAACjB,MAAD,CATkB;AAU7BkB,YAAUlB,MAVmB;AAW7BmB,YAAUnB,MAXmB;AAY7BoB,UAAQ,EAACC,KAAIrB,MAAL,EAAasB,MAAKtB,MAAlB,EAZqB;AAa7BuB,UAAQvB,MAbqB;AAc7BwB,WAAS,EAACpB,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,MAAjC;;AAdoB,CAAX,CAApB;;AAkBA,IAAIkB,UAAU,mBAASC,KAAT,CAAe,SAAf,EAA0B5B,aAA1B,CAAd;;AAEA,IAAI6B,oBAAoB,IAAI,mBAAS9B,MAAb,CAAoB;AAC1C+B,WAAS,EAACxB,MAAKP,OAAOQ,KAAP,CAAaC,QAAnB,EAA6BC,KAAI,SAAjC,EADiC;AAE1CH,QAAMD,MAFoC,EAE5B;;AAEd;AACA0B,YAAW1B,MAL+B;;AAO1C;AACA2B,OAAK,CAAC3B,MAAD,CARqC,EAQ3B;AACf4B,cAAY5B,MAT8B;;AAW1C;AACA6B,aAAW7B,MAZ+B,EAYvB;;AAEnB8B,OAAK9B,MAdqC;AAe1C+B,OAAK,EAACC,MAAKhC,MAAN,EAAciC,YAAYjC,MAA1B,EAAkCkC,QAAQlC,MAA1C,EAAkDmC,OAAOnC,MAAzD,EAfqC,EAe6B;AACvEoC,QAAM,CAACpC,MAAD;;AAhBoC,CAApB,CAAxB;;AAoBA,IAAIqC,cAAc,mBAASd,KAAT,CAAe,aAAf,EAA8BC,iBAA9B,CAAlB;;kBAEe,EAACF,SAASA,OAAV,EAAmBe,aAAaA,WAAhC,E","file":"project.model.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nvar Schema = mongoose.Schema;\n\nvar ProjectSchema = new Schema({\n  name: String,\n  info: String,\n  status: Number, // Status : 0 - completed, 1 - ongoing, 2-upcoming\n  type: {type:Schema.Types.ObjectId, ref:\"ProjectType\"}, // Land/Flat/Villa\n  isLegalClr: Boolean, // Is Legal Cleared?\n  isTechClr: Boolean, // Is Technical Cleared?\n  approvals:{dtcp: Boolean, cmda: Boolean, lpa: Boolean, panchayath: Boolean},\n  imagesInt : [String],\n  imagesExt: [String],\n  location: String,\n  brochure: String,\n  offers: {pic:String, text:String},\n  mailId: String,\n  builder: {type:Schema.Types.ObjectId, ref:\"User\"}\n\n});\n\nvar Project = mongoose.model('Project', ProjectSchema);\n\nvar ProjectTypeSchema = new mongoose.Schema({\n  project: {type:Schema.Types.ObjectId, ref:\"Project\"},\n  type: Number, // Land-1, Flat-2, Villa-3\n  \n  // Land\n  layoutNo : Number,\n\n  // Flat\n  upt: [Number], // Units per Tower\n  percentUDS: Number,\n\n  // Villa\n  villaType: Number, // 1-L+B, 2-B+UDS\n\n  num: Number,\n  rps: {base:Number, devCharges: Number, others: Number, total: Number}, // Rate per square feet\n  size: [Number]\n\n});\n\nvar ProjectType = mongoose.model('ProjectType', ProjectTypeSchema);\n\nexport default {Project: Project, ProjectType: ProjectType};"]}